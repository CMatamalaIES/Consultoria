axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
text = element_text(family = "Calibri")
)
centroides <- tribble(
~Region,	~latitud,	~longitud,
"Región de Arica y Parinacota",	-18.496932,	-69.62854,
"Región de Tarapacá",	-20.215794,	-69.393066,
"Región de Antofagasta",	-23.53599,	-69.119139,
"Región de Atacama",	-27.395285,	-69.910141,
"Región de Coquimbo",	-30.619033,	-70.860692,
"Región de Valparaíso",	-32.782424,	-70.959617,
"Región Metropolitana",	-33.604344,	-70.627063,
"Región del Libertador General Bernardo O'Higgins",	-34.435366,	-71.046566,
"Región del Maule",	-35.62133,	-71.445649,
"Región de Ñuble",	-36.645411,	-71.974643,
"Región del Biobío",	-37.500562,	-72.392417,
"Región de la Araucanía",	-38.649155,	-72.27425,
"Región de Los Ríos",	-40.004982,	-72.570862,
"Región de los Lagos",	-42.04281,	-72.89418,
"Región de Aysén del General Carlos Ibáñez del Campo",	-46.416524,	-73.257083,
"Región de Magallanes y la Antártica Chilena",	-52.488319,	-71.873603
)
coord_uf <- Resumen_UnidadFiscalizable %>%
select("RegionNombre", "Latitud", "Longitud") %>%
filter(RegionNombre == reg, !is.na(Latitud), !is.na(Longitud))
if (reg == "Región de Aysén del General Carlos Ibáñez del Campo"){
long <- unique(coord_uf$Longitud_reg)
ltd <- unique(coord_uf$Latitud_reg)
} else {
long <- filter(centroides, Region == reg)$longitud
ltd <- filter(centroides, Region == reg)$latitud
}
if (reg %in% c("Región de Antofagasta", "Región de Atacama", "Región de Coquimbo", "Región de los Lagos",
"Región de Aysén del General Carlos Ibáñez del Campo", "Región de Magallanes y la Antártica Chilena")){
z <- 7
} else {
z <- 8
}
m <- leaflet(coord_uf) %>%
setView(lng = long, lat = ltd, zoom = z) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(~Longitud, ~Latitud, color = "red", weight = 1, radius = 3)
mapshot(m, file = "~/mapa.png")
file.move("~/mapa.png", "Mapa/", overwrite = TRUE)
file.move("Mapa/mapa.png", "Mapa/", overwrite = TRUE)
file.move("Mapa/mapa.png", overwrite = TRUE)
reg <- 'Magallanes'
# Paquetes a usar
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra", "flextable", "filesstrings",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl", "leaflet", "mapview", "purrr")
# Revisar si paquetes están instalados. Si lo están, cargará los paquetes. Si no lo están, instalará y luego cargará los paquetes.
nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lapply(nuevos_paquetes, install.packages); lapply(lista_paquetes, require, character.only = TRUE)
rm(lista_paquetes, nuevos_paquetes)
#font_import()
loadfonts(device = "win")
reg1 <- c("Región de Tarapacá"
, "Región de Antofagasta"
, "Región de Atacama"
, "Región de Coquimbo"
, "Región del Libertador General Bernardo O'Higgins"
, "Región de Valparaíso"
, "Región del Maule"
, "Región del Biobío"
, "Región de la Araucanía"
, "Región de los Lagos"
, "Región de Aysén del General Carlos Ibañez del Campo"
, "Región de Magallanes y la Antártica Chilena"
, "Región Metropolitana"
, "Región de Los Ríos"
, "Región de Arica y Parinacota"
, "Región de Ñuble")
reg2 <- c("Tarapacá"
, "Antofagasta"
, "Atacama"
, "Coquimbo"
, "O'Higgins"
, "Valparaíso"
, "Maule"
, "Biobío"
, "Araucanía"
, "Lagos"
, "Aysén"
, "Magallanes"
, "Metropolitana"
, "Ríos"
, "Arica"
, "Ñuble")
reg3 <- as.data.frame(cbind(reg1,reg2))
Resumen_UnidadFiscalizable <- read_excel("../Datos/Resumen_UnidadFiscalizable.xlsx")
Datos_Instrumento <- read_excel("../Datos/Datos_Instrumento.xlsx")
Detalle_ProcesoSancionUnidadFiscalizable <- read_excel("../Datos/Detalle_ProcesoSancionUnidadFiscalizable.xlsx")
Datos_Sancion <- read_excel("../Datos/Datos_Sancion.xlsx")
Datos_Sancion <- Datos_Sancion %>%
mutate(RegionSelect = case_when(
Region == reg ~ reg,
TRUE ~ "Resto de las Regiones"))
# Datos: UF por región
UF_reg <- Resumen_UnidadFiscalizable %>% filter(RegionNombre == reg)
resumen_reg <- Resumen_UnidadFiscalizable %>%
group_by("Región" = RegionNombre) %>%
summarise(UFs = n()) %>%
arrange(desc(UFs)) %>%
ungroup() %>%
mutate(Porcentaje = round(UFs/sum(UFs)*100,1),
Destacar = case_when(`Región` == reg ~ "Si",
is.na(`Región`) ~ "Si2",
TRUE ~ "No"),
orden_reg = case_when(
`Región` == "Región de Arica y Parinacota" ~ 17,
`Región` == "Región de Tarapacá" ~ 16,
`Región` == "Región de Antofagasta" ~ 15,
`Región` == "Región de Atacama" ~ 14,
`Región` == "Región de Coquimbo" ~ 13,
`Región` == "Región Metropolitana" ~ 12,
`Región` == "Región de Valparaíso" ~ 11,
`Región` == "Región del Libertador General Bernardo O'Higgins" ~ 10,
`Región` == "Región del Maule" ~ 9,
`Región` == "Región de Ñuble" ~ 8,
`Región` == "Región del Biobío" ~ 7,
`Región` == "Región de la Araucanía" ~ 6,
`Región` == "Región de Los Ríos" ~ 5,
`Región` == "Región de los Lagos" ~ 4,
`Región` == "Región de Aysén del General Carlos Ibañez del Campo" ~ 3,
`Región` == "Región de Magallanes y la Antártica Chilena" ~ 2,
is.na(`Región`) ~ 1
))
Porcentaje_uf_reg <- filter(resumen_reg, `Región` == reg)[[3]]
resumen_cate <- Resumen_UnidadFiscalizable %>%
filter(RegionNombre == reg) %>%
group_by("Categoría Económica" = CategoriaEconomicaNombre) %>%
summarise(UFs = n()) %>%
arrange(desc(UFs)) %>%
ungroup() %>%
mutate(Porcentaje = round(UFs/sum(UFs)*100,1),
Destacar = case_when(is.na(`Categoría Económica`) ~ "Si",
TRUE ~ "No"))
top_RCA <- Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre) %>%
summarise(RCAs = n()) %>%
ungroup() %>%
rename("Categoría Económica" = CategoriaEconomicaNombre) %>%
arrange(desc(RCAs)) %>%
top_n(5)
FDC_reg_porcentaje <- Datos_Sancion %>%
distinct(ProcesoSancionId, Region, AnoInicio, AnoExpediente) %>%
group_by(Region) %>%
summarise(FDC = n()) %>%
replace_na(list(Region = "Sin Región")) %>%
arrange(desc(FDC)) %>%
mutate(Porcentaje = round(FDC/sum(FDC)*100,1),
Destacar = case_when(Region == reg ~ "Si",
TRUE ~ "No"),
orden_reg = case_when(
Region == "Región de Arica y Parinacota" ~ 16,
Region == "Región de Tarapacá" ~ 15,
Region == "Región de Antofagasta" ~ 14,
Region == "Región de Atacama" ~ 13,
Region == "Región de Coquimbo" ~ 12,
Region == "Región Metropolitana" ~ 11,
Region == "Región de Valparaíso" ~ 10,
Region == "Región del Libertador General Bernardo O'Higgins" ~ 9,
Region == "Región del Maule" ~ 8,
Region == "Región de Ñuble" ~ 7,
Region == "Región del Biobío" ~ 6,
Region == "Región de la Araucanía" ~ 5,
Region == "Región de Los Ríos" ~ 4,
Region == "Región de los Lagos" ~ 3,
Region == "Región de Aysén del General Carlos Ibañez del Campo" ~ 2,
Region == "Región de Magallanes y la Antártica Chilena" ~ 1
),
rank = 1:n())
FDC_año <- Datos_Sancion %>%
distinct(ProcesoSancionId, RegionSelect, AnoInicio, AnoExpediente) %>%
group_by(AnoExpediente, RegionSelect) %>%
summarise(FDC = (n())) %>%
arrange(AnoExpediente)
Comparar <- FDC_año %>%
ungroup() %>% group_by(RegionSelect) %>%
summarise(sum(FDC))
FDC_cate <- Datos_Sancion %>%
distinct(ProcesoSancionId, CategoriaEconomica, AnoInicio, AnoExpediente, RegionSelect) %>%
group_by(CategoriaEconomica, RegionSelect) %>%
summarise(FDC = n()) %>%
ungroup() %>%
group_by(RegionSelect) %>%
mutate(Porcentaje = round(FDC/sum(FDC)*100,1),
Destacar = case_when(is.na(CategoriaEconomica) ~ "Si",
TRUE ~ "No")) %>%
filter(RegionSelect == reg)
MAX_cate <- FDC_cate %>% filter(RegionSelect == reg) %>%
arrange(desc(FDC))
FDC_origen <- Datos_Sancion %>%
filter(Region == reg) %>%
distinct(ProcesoSancionId, ProcesoSancionTipoNombre) %>%
group_by(ProcesoSancionTipoNombre) %>%
summarise(FDC = n()) %>%
mutate(Porcentaje = round(FDC/sum(FDC)*100,0)) %>%
arrange(desc(FDC))
FDC_estado <- Datos_Sancion %>%
distinct(ProcesoSancionId, Region, AnoInicio, AnoExpediente, ProcesoSancionEstadoNombre) %>%
filter(Region == reg) %>%
mutate(Estado = case_when(
ProcesoSancionEstadoNombre %in% c("Terminado - PDC", "PDC Ejecutado", "PDC en Análisis", "PDC en Ejecución") ~ "En PDC",
ProcesoSancionEstadoNombre %in% c("Terminado - Absolución", "Terminado - Archivado", "Terminado - Sanción") ~ "Terminado",
TRUE ~ "En proceso"
)) %>%
group_by(Estado) %>%
summarise(FDC = n()) %>%
mutate(Porcentaje = round(FDC/sum(FDC)*100,1))
FDC_estado_detalle <- Datos_Sancion %>%
distinct(ProcesoSancionId, Region, AnoInicio, AnoExpediente, ProcesoSancionEstadoNombre) %>%
filter(Region == reg)
uf_reg <- resumen_reg %>%
ggplot(aes(reorder(`Región`, orden_reg), Porcentaje, label = paste0(prettyNum(Porcentaje, big.mark = ".", decimal.mark = ","),"%", " (", prettyNum(UFs, big.mark = ".", decimal.mark = ","),")"), fill = Destacar)) +
geom_col() +
ylim(0, max(resumen_cate$Porcentaje)*1.22) +
coord_flip() +
geom_text(hjust = -0.22, size = 3) +
scale_fill_manual(values = c("Si" = "#E87474", "No" = "light blue", "Si2" = "light gray")) +
theme(panel.background = element_rect(fill = NA),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
text = element_text(family = "Calibri")
)
uf_cat <- resumen_cate %>%
ggplot(aes(reorder(`Categoría Económica`, Porcentaje), Porcentaje, label = paste0(prettyNum(Porcentaje, big.mark = ".", decimal.mark = ","),"%", " (", prettyNum(UFs, big.mark = ".", decimal.mark = ","), ")"), fill = Destacar)) +
geom_col() +
ylim(0, max(resumen_cate$Porcentaje)*1.2) +
coord_flip() +
geom_text(hjust = -0.05, size = 3) +
scale_fill_manual(values = c("Si" = "light gray", "No" = "light blue")) +
theme(panel.background = element_rect(fill = NA),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
text = element_text(family = "Calibri")
)
fdc_reg <- FDC_reg_porcentaje %>%
ggplot(aes(reorder(Region, orden_reg), Porcentaje, label = paste0(prettyNum(Porcentaje, big.mark = ".", decimal.mark = ","), "%", " (", prettyNum(FDC, big.mark = ".", decimal.mark = ","), ")"), fill = Destacar)) +
geom_col() +
ylim(0, max(FDC_reg_porcentaje$Porcentaje)*1.25) +
coord_flip() +
geom_text(hjust = -0.22, size = 3) +
scale_fill_manual(values = c("Si" = "#E87474", "No" = "light blue", "Si2" = "light gray")) +
theme(panel.background = element_rect(fill = NA),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
text = element_text(family = "Calibri")
)
fdc_anio <- FDC_año %>%
filter(RegionSelect == reg) %>%
ggplot(aes(AnoExpediente, FDC, label = FDC)) +
geom_line(color = "light blue", size = 2)  +
geom_label(color = "#E87474")  +
ylim(min(FDC_año[FDC_año$RegionSelect == reg,]$FDC)-2, max(FDC_año[FDC_año$RegionSelect == reg,]$FDC)*1.05) +
scale_x_continuous(breaks = c(2012:2019)) +
labs(y = "FDC") +
theme(panel.background = element_rect(fill = NA),
legend.position = "top",
legend.title = element_blank(),
legend.key = element_rect(size = 1),
legend.key.size = unit(0.5, 'lines'),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
text = element_text(family = "Calibri")
)
fdc_cat <- FDC_cate %>%
ggplot(aes(reorder(CategoriaEconomica, Porcentaje), Porcentaje, label = paste0(prettyNum(Porcentaje, big.mark = ".", decimal.mark = ","), "%", " (", prettyNum(FDC, big.mark = ".", decimal.mark = ","), ")"), fill = Destacar)) +
geom_col() +
ylim(0, max(FDC_cate$Porcentaje)*1.2) +
coord_flip() +
geom_text(hjust = -0.22, size = 3) +
scale_fill_manual(values = c("Si" = "light gray", "No" = "light blue")) +
theme(panel.background = element_rect(fill = NA),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
text = element_text(family = "Calibri")
)
fdc_origen <- FDC_origen %>%
ggplot(aes(ProcesoSancionTipoNombre, Porcentaje, label = paste0(Porcentaje, "%", " (", FDC, ")"))) +
geom_col(fill = "light blue", width = 0.6) +
ylim(0, max(FDC_origen$Porcentaje)*1.05) +
geom_text(vjust = -0.5, size = 3) +
labs(y = "Porcentaje (%)") +
theme(panel.background = element_rect(fill = NA),
legend.position = "top",
legend.title = element_blank(),
legend.key = element_rect(size = 1),
legend.key.size = unit(0.5, 'lines'),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(margin = margin(t = -5)),
text = element_text(family = "Calibri")
)
fdc_estado <- FDC_estado %>%
ggplot(aes(Estado, Porcentaje, label = paste0(Porcentaje, "%", " (", FDC, ")"))) +
geom_col(fill = "light blue", width = 0.6) +
ylim(0, max(FDC_estado$Porcentaje)*1.05) +
geom_text(vjust = -0.5, size = 3) +
labs(y = "Porcentaje (%)") +
theme(panel.background = element_rect(fill = NA),
legend.position = "top",
legend.title = element_blank(),
legend.key = element_rect(size = 1),
legend.key.size = unit(0.5, 'lines'),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(margin = margin(t = -5)),
text = element_text(family = "Calibri")
)
centroides <- tribble(
~Region,	~latitud,	~longitud,
"Región de Arica y Parinacota",	-18.496932,	-69.62854,
"Región de Tarapacá",	-20.215794,	-69.393066,
"Región de Antofagasta",	-23.53599,	-69.119139,
"Región de Atacama",	-27.395285,	-69.910141,
"Región de Coquimbo",	-30.619033,	-70.860692,
"Región de Valparaíso",	-32.782424,	-70.959617,
"Región Metropolitana",	-33.604344,	-70.627063,
"Región del Libertador General Bernardo O'Higgins",	-34.435366,	-71.046566,
"Región del Maule",	-35.62133,	-71.445649,
"Región de Ñuble",	-36.645411,	-71.974643,
"Región del Biobío",	-37.500562,	-72.392417,
"Región de la Araucanía",	-38.649155,	-72.27425,
"Región de Los Ríos",	-40.004982,	-72.570862,
"Región de los Lagos",	-42.04281,	-72.89418,
"Región de Aysén del General Carlos Ibáñez del Campo",	-46.416524,	-73.257083,
"Región de Magallanes y la Antártica Chilena",	-52.488319,	-71.873603
)
coord_uf <- Resumen_UnidadFiscalizable %>%
select("RegionNombre", "Latitud", "Longitud") %>%
filter(RegionNombre == reg, !is.na(Latitud), !is.na(Longitud))
if (reg == "Región de Aysén del General Carlos Ibáñez del Campo"){
long <- unique(coord_uf$Longitud_reg)
ltd <- unique(coord_uf$Latitud_reg)
} else {
long <- filter(centroides, Region == reg)$longitud
ltd <- filter(centroides, Region == reg)$latitud
}
if (reg %in% c("Región de Antofagasta", "Región de Atacama", "Región de Coquimbo", "Región de los Lagos",
"Región de Aysén del General Carlos Ibáñez del Campo", "Región de Magallanes y la Antártica Chilena")){
z <- 7
} else {
z <- 8
}
m <- leaflet(coord_uf) %>%
setView(lng = long, lat = ltd, zoom = z) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(~Longitud, ~Latitud, color = "red", weight = 1, radius = 3)
mapshot(m, file = "~/mapa.png")
webshot::install_phantomjs()
mapshot(m, file = "~/mapa.png")
file.move("~/mapa.png", "Mapa/", overwrite = TRUE)
library(haven)
Casen_2017 <- read_sav("C:/Users/Cobal/Downloads/Casen 2017.sav")
library(foreign)
write.csv(Casen_2017,'Casen2017.csv')
# Valores que se usarÃ¡n como "parÃ¡metros" (variables) del reporte
regiones <- c("TarapacÃ¡", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"ValparaÃ­so", "Maule", "BiobÃ­o", "AraucanÃ­a", "Lagos", "AysÃ©n",
"Magallanes", "Metropolitana", "RÃ­os", "Arica", "Ãuble")
# Definir funciÃ³n para generaciÃ³n de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Valores que se usarÃ¡n como "parÃ¡metros" (variables) del reporte
regiones <- c("TarapacÃ¡", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"ValparaÃ­so", "Maule", "BiobÃ­o", "AraucanÃ­a", "Lagos", "AysÃ©n",
"Magallanes", "Metropolitana", "RÃ­os", "Arica", "Ãuble")
# Valores que se usarÃ¡n como "parÃ¡metros" (variables) del reporte
regiones <- c("TarapacÃ¡", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"ValparaÃ­so", "Maule", "BiobÃ­o", "AraucanÃ­a", "Lagos", "AysÃ©n",
"Magallanes", "Metropolitana", "RÃ­os", "Arica", "Ãuble")
# Definir funciÃ³n para generaciÃ³n de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Valores que se usarÃ¡n como "parÃ¡metros" (variables) del reporte
regiones <- c("Tarapacá", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valparaíso", "Maule", "Biobío", "Araucanía", "Lagos", "Aysén",
"Magallanes", "Metropolitana", "Ríos", "Arica", "Ñuble")
# Definir funciÃ³n para generaciÃ³n de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Paquetes a usar
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra", "flextable", "filesstrings",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl", "leaflet", "mapview", "purrr")
# Revisar si paquetes están instalados. Si lo están, cargará los paquetes. Si no lo están, instalará y luego cargará los paquetes.
nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lapply(nuevos_paquetes, install.packages); lapply(lista_paquetes, require, character.only = TRUE)
rm(lista_paquetes, nuevos_paquetes)
#font_import()
loadfonts(device = "win")
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapac?", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valpara?so", "Maule", "Biob?o", "Araucan?a", "Lagos", "Ays?n",
"Magallanes", "Metropolitana", "R?os", "Arica", "?uble")
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapac?", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valpara?so", "Maule", "Biob?o", "Araucan?a", "Lagos", "Ays?n",
"Magallanes", "Metropolitana", "R?os", "Arica", "?uble")
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapac?", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valpara?so", "Maule", "Biob?o", "Araucan?a", "Lagos", "Ays?n",
"Magallanes", "Metropolitana", "R?os", "Arica", "?uble")
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapacá", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valparaíso", "Maule", "Biobío", "Araucanía", "Lagos", "Aysén",
"Magallanes", "Metropolitana", "Ríos", "Arica", "Ñuble")
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
webshot::install_phantomjs()
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapacá", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valparaíso", "Maule", "Biobío", "Araucanía", "Lagos", "Aysén",
"Magallanes", "Metropolitana", "Ríos", "Arica", "Ñuble")
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapacá")#, "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
# Definir función para generación de reportes
for (i in regiones){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = i),
output_file = paste0("Reportes/Reporte_", i, "_", format(Sys.Date(), "%d-%m-%Y"))
)
}
